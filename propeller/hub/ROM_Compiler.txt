
Here·are all the source codes for the executable portions of the Propeller's ROM.

The booter and interpreter·binaries·appear scrambled when the ROM is read normally, but automatically unscramble when loading into a cog. Since Hippy succeeded in reversing the scrambling pattern in response to my·challenge, I'm revealing the source codes. I·hope this will yield more progress than headaches.

Note that the executable portion of the ROM ($F004-$FFFF)·was pre-filled with longs randomly picked from the interpreter's scrambled binary before the actual code was laid in. This was a feeble measure to obscure the boundaries of the interpreter and booter codes. It was not much of a deterrent to Hippy, however, as I'm not even sure that he noticed.

Here is a map of the executable portion of the ROM:

$F004 - Interpreter binary (scrambled)
$F800 - Booter binary (scrambled)
$FF00 - Copyright message (ascii, 32 columns/row)
$FF70 - Runner bytecode (Spin code which builds initial stack frames for Spin processes)



▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔


Chip Gracey
Parallax, Inc.




procedure TEditorForm.ComposeROM;
const
  Info: string = '================' +
                 ' Copyright 2005 ' +
                 ' Parallax, Inc. ' +
                 '----------------' +
                 'www.parallax.com' +
                 '================' ;
var
  i: integer;
  sum: byte;
begin
  // install rom items
  InstallBackground;
  InstallFont($8000);
  InstallLogTable($C000);
  InstallAntiLogTable($D000);
  InstallSinTable($E000);
  InstallInterpreter($F004);
  InstallBooter($F800);
  InstallRunner;
  // install info string
  for i := 0 to Length(Info)-1 do MemoryBuffer[$FF00+i] := Byte(Info[1+i]);
  // install rom checksum byte
  sum := 0;
  MemoryBuffer[$F002] := 0;
  for i := $8000 to $FFFF do sum := sum + MemoryBuffer[i];
  MemoryBuffer[$F002] := -sum;
  // save rom file
  SaveFile('ROM', @MemoryBuffer[$8000], $8000);
  // show bitstream (diagnostic)
  //ShowBitStream;
end;

procedure TEditorForm.InstallBackground;
var
  Size, i: integer;
  Background: array[0..$1FF] of cardinal;
begin
  // use scrambled interpreter longs as background
  Size := InstallInterpreter($8000) shr 2;
  for i := 0 to $1FF do Background[i] := PIntegerArray(@MemoryBuffer[$8000])[i];
  RandSeed := $6E3973BF;
  for i := 0 to $1FFF do PIntegerArray(@MemoryBuffer[$8000])[i] := Background[Random(Size)];
end;

procedure TEditorForm.InstallFont(Address: integer);
var
  FontBitmap: TBitmap;
  xx, yy, x, y: integer;
  Buff: cardinal;
begin
  FontBitmap := TBitmap.Create;
  FontBitmap.LoadFromFile('FONT.BMP');
  for yy := 0 to 7 do
  begin
      for xx := 0 to 15 do
      begin
          for y := 0 to 31 do
          begin
              for x := 0 to 15 do Buff := (Buff shl 2 +
                  Ord(FontBitmap.Canvas.Pixels[(xx shl 1 + 0) * 17 + 1 + 15 - x, yy * 33 + 1 + y] = clBlack) +
                  Ord(FontBitmap.Canvas.Pixels[(xx shl 1 + 1) * 17 + 1 + 15 - x, yy * 33 + 1 + y] = clBlack) shl 1);
              PIntegerArray(@MemoryBuffer[Address])[yy shl 9 + xx shl 5 + y] := Buff;
          end;
      end;
  end;
  FontBitmap.Free;
end;

procedure TEditorForm.InstallLogTable(Address: integer);
var
  i, s: integer;
  f: extended;
begin
  for i := 0 to $7FF do
  begin
    f := Round(Log2(1 + i / $800) * $10000);
    s := Trunc(f);
    PWordArray(@MemoryBuffer[Address])[i] := s;
  end;
end;

procedure TEditorForm.InstallAntiLogTable(Address: integer);
var
  i, s: integer;
  f: extended;
begin
  for i := 0 to $7FF do
  begin
    f := Round(Power(2, i / $800) * $10000);
    s := Trunc(f);
    PWordArray(@MemoryBuffer[Address])[i] := s;
  end;
end;

procedure TEditorForm.InstallSinTable(Address: integer);
var
  i, s: integer;
  f: extended;
begin
  for i := 0 to $800 do
  begin
    f := Round(Sin((i / $800) * (pi / 2)) * $FFFF);
    s := Trunc(f);
    PWordArray(@MemoryBuffer[Address])[i] := s;
  end;
end;

function TEditorForm.InstallInterpreter(Address: integer): integer;
var
  f: file;
  Size, i: Integer;
begin
  AssignFile(f, 'INTERPRETER.obj');
  try
    Reset(f, 1);
    Size := FileSize(f);
    BlockRead(f, MemoryBuffer[Address], Size);
    for i := 0 to Size shr 2 - 1 do
      Scramble(PIntegerArray(@MemoryBuffer[Address])[i]);
    Result := Size;
  finally
    CloseFile(f);
  end;
end;

procedure TEditorForm.InstallBooter(Address: integer);
var
  f: file;
  Size, i: Integer;
begin
  AssignFile(f, 'BOOTER.obj');
  try
    Reset(f, 1);
    Size := FileSize(f);
    BlockRead(f, MemoryBuffer[Address], Size);
    for i := 0 to Size shr 2 - 1 do
      Scramble(PIntegerArray(@MemoryBuffer[Address])[i]);
  finally
    CloseFile(f);
  end;
end;

procedure TEditorForm.InstallRunner;
var
  f: file;
  Size: Integer;
begin
  AssignFile(f, 'RUNNER.obj');
  try
    Reset(f, 1);
    Size := FileSize(f);
    BlockRead(f, MemoryBuffer[$10000 - Size], Size);
  finally
    CloseFile(f);
  end;
end;

procedure TEditorForm.Scramble(var x: integer);
begin
  x :=  x shr 14 and 1 shl 31 +
        x shr 17 and 1 shl 30 +
        x shr 03 and 1 shl 29 +
        x shr 07 and 1 shl 28 +
        x shr 04 and 1 shl 27 +
        x shr 01 and 1 shl 26 +
        x shr 09 and 1 shl 25 +
        x shr 02 and 1 shl 24 +
        x shr 15 and 1 shl 23 +
        x shr 06 and 1 shl 22 +
        x shr 29 and 1 shl 21 +
        x shr 23 and 1 shl 20 +
        x shr 26 and 1 shl 19 +
        x shr 10 and 1 shl 18 +
        x shr 24 and 1 shl 17 +
        x shr 13 and 1 shl 16 +
        x shr 22 and 1 shl 15 +
        x shr 18 and 1 shl 14 +
        x shr 05 and 1 shl 13 +
        x shr 28 and 1 shl 12 +
        x shr 20 and 1 shl 11 +
        x shr 00 and 1 shl 10 +
        x shr 11 and 1 shl 09 +
        x shr 21 and 1 shl 08 +
        x shr 30 and 1 shl 07 +
        x shr 27 and 1 shl 06 +
        x shr 12 and 1 shl 05 +
        x shr 25 and 1 shl 04 +
        x shr 31 and 1 shl 03 +
        x shr 08 and 1 shl 02 +
        x shr 16 and 1 shl 01 +
        x shr 19 and 1 shl 00 ;
end;
