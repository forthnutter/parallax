<plugin>
  <instance class="Stimulus" />
  <code>using System;
using System.IO;
using System.Globalization;
using System.Windows.Forms;

using Gear.EmulationCore;
using Gear.PluginSupport;

class Stimulus : PluginBase
{
  private Propeller Chip;
  private int Drive;
  private bool clk;
  private double lastTime;
  private double nextTime;
  private double thisTime;
  private string StimulusFileName;
  private int lineNo;
  private string curLine;
  private bool StartUp;

  private Clock[] Clocks;
  
  private TextBox textBox1;
  private ContextMenuStrip ctxMenu;
  private System.ComponentModel.IContainer components;
  private ToolStripMenuItem pmOpenStm;
  private ToolStripSeparator pmSep1;
  private ToolStripMenuItem pmSaveStm;
  
  public override Boolean AllowHotKeys { get { return false; } }
  
  private class Clock
  {
    public byte pin;
    public bool enabled;
    public bool state;
    private Stimulus stim;
    private double nextTime;
    private double highTime;
    private double lowTime;
    
    public double high
    {
      get { return(highTime); }
      set 
      {
        if (!enabled)
        {
          enabled = true;
          state = true;
          lowTime = value;
          nextTime = stim.thisTime + value;
          stim.DrivePin(pin,'1');     
        }
        highTime = value;       
      }
    }

    public double low
    {
      get { return(lowTime); }
      set 
      {
        if (!enabled)
        {
          enabled = true;
          state = false;
          highTime = value;
          nextTime = stim.thisTime + value;
          stim.DrivePin(pin,'0');     
        }
        lowTime = value;       
      }
    }
    
    public double period
    {
      get { return(lowTime + highTime); }
      set 
      {
        if (!enabled)
        {
          enabled = true; 
          state = false;
          highTime = value / 2;
          lowTime = value / 2;
          nextTime = stim.thisTime + value;
          stim.DrivePin(pin,'0');     
        }
        else
        {
          double p = pwm;
          highTime = value * p;
          lowTime = value * (1 - p);
        }
      }   
    }
    
    public double pwm
    {
      get { return(highTime / period); }
      set
      {
        if (value &gt; 0.999)
          value = 0.999;
        if (value &lt; 0.001)
          value = 0.001;
        if (enabled)
        {
          double p = period;
          highTime = p * value;
          lowTime = p * (1 - value);
        }
      }
    }

    public Clock(Stimulus stm, byte pinNo)
    {
      stim = stm;
      pin = pinNo;
      highTime = 0;
      lowTime = 0;
      enabled = false;
    }
  
    public bool OnClock( double time )
    {
      if (time &lt; nextTime)
        return(false);
      state = !state;
      if (state)
      {
        stim.DrivePin(pin,'1');      
        nextTime += highTime;
      }
      else
      {
        stim.DrivePin(pin,'0');      
        nextTime += lowTime;
      }
      return(true);
    }
    
  }
  
  public Stimulus()
  {
    this.SuspendLayout();
    this.components = new System.ComponentModel.Container();
    this.textBox1 = new System.Windows.Forms.TextBox();
    this.ctxMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
    this.pmOpenStm = new System.Windows.Forms.ToolStripMenuItem();
    this.pmSep1 = new System.Windows.Forms.ToolStripSeparator();
    this.pmSaveStm = new System.Windows.Forms.ToolStripMenuItem();

    this.textBox1.ContextMenuStrip = this.ctxMenu;
    this.textBox1.BackColor = System.Drawing.SystemColors.Window;
    this.textBox1.Font = new System.Drawing.Font("Courier New", 9.75F, 
         System.Drawing.FontStyle.Regular, 
         System.Drawing.GraphicsUnit.Point, ((byte)(0)));
    this.textBox1.Multiline = true;
    this.textBox1.Name = "textBox1";
    this.textBox1.TabIndex = 0;
    this.textBox1.Dock = System.Windows.Forms.DockStyle.Fill;

    this.ctxMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
    this.pmOpenStm,
    this.pmSep1,
    this.pmSaveStm});
    this.ctxMenu.Name = "ctxMenu";
    this.ctxMenu.Size = new System.Drawing.Size(162, 54);

    this.pmOpenStm.Name = "pmOpenStm";
    this.pmOpenStm.Size = new System.Drawing.Size(161, 22);
    this.pmOpenStm.Text = "Open Stimulus File";
    this.pmOpenStm.Click += new System.EventHandler(this.pmOpenClick);

    this.pmSep1.Name = "pmSep1";
    this.pmSep1.Size = new System.Drawing.Size(158, 6);

    this.pmSaveStm.Name = "pmSaveStm";
    this.pmSaveStm.Size = new System.Drawing.Size(161, 22);
    this.pmSaveStm.Text = "Save Stimuls File";
    this.pmSaveStm.Click += new System.EventHandler(this.pmSaveClick);

    this.Controls.Add(this.textBox1);
    this.ResumeLayout(false);
    this.PerformLayout();

    Clocks = new Clock[32];

    for(byte i=0;i&lt;32;i++)
      Clocks[i] = new Clock(this, i);
  }
  
  public override string Title
  { 
    get { return "Stimulus"; } 
  }

  private void LoadStimulusFile()
  {
    OpenFileDialog ofd = new OpenFileDialog();
    ofd.Filter = "Stimulus Files (*.stm)|*.stm|All Files (*.*)|*.*";
    ofd.Title = "Open Stimulus File...";
    if (ofd.ShowDialog(this) == DialogResult.OK)
    {
      StimulusFileName = ofd.FileName;
      FileStream fs = new FileStream(StimulusFileName, FileMode.Open, FileAccess.Read); 
      StreamReader tr = new StreamReader(fs);
      this.textBox1.Text = tr.ReadToEnd();
      tr.Close();
      fs.Close();
    }
    else
    {
      StimulusFileName = "";
      this.textBox1.Text = "";
    }
    lineNo = 0;
    ParseLine();
  }
  
  private void pmOpenClick(object sender, EventArgs e)
  {
    LoadStimulusFile();
  }

  private void pmSaveClick(object sender, EventArgs e)
  {
    FileStream fs = new FileStream(StimulusFileName, FileMode.Open, FileAccess.Write); 
    StreamWriter tw = new StreamWriter(fs);
    tw.Write(this.textBox1.Text);
    tw.Close();
    fs.Close();
  }

  public override void PresentChip(Propeller host)
  {
    lastTime = 0;
    Chip = host;
    Chip.NotifyOnPins(this);
    Chip.NotifyOnClock(this);
    LoadStimulusFile();
    OnReset();
  }

  public override void OnReset()
  {
    lastTime = 0;
    nextTime = 0;
    thisTime = 0;
    lineNo = 0;
    foreach(Clock clk in Clocks)
      clk.enabled = false;
    ParseLine();
  }
  
  public override void OnPinChange(double time, PinState[] pins)
  {
    // Not Used
  }

  public override void OnClock(double time)
  {
    thisTime = time;
    if(curLine.Length &gt; 0)
    {
      if(time &gt; nextTime)
      {
        DoLine();
        ParseLine();
      }
    }
    // Toggle the clocks
    foreach(Clock clk in Clocks)
      if (clk.enabled) 
        clk.OnClock(time);
  }
  
  private void DrivePin(byte pin, char state)
  {
    if ((pin &gt;= 0) &amp;&amp; (pin &lt; 32))
      switch(state)
      {
        case '1' : Chip.DrivePin(pin, false, true); break;
        case '0' : Chip.DrivePin(pin, false, false); break;
        case 'x' : Chip.DrivePin(pin, true, false); break;
      }
  }
  
  private void DoLine()
  {
    Clock lastClock = null;
    string[] items = curLine.Split(new char[1]{' '});
    
    foreach (string tok in items)
    {
      string[] val = tok.Split(new char[1]{'='});
      try
      {
        if (val.Length == 2)
        {
          if (0 == string.Compare(val[0],"clock",true))
          {
            byte pin = Byte.Parse(val[1]);
            lastClock = Clocks[pin];
          }
          else if(0 == string.Compare(val[0],"high",true))
          {
            if (lastClock != null)
              lastClock.high = ParseTime(val[1]);
          }
          else if(0 == string.Compare(val[0],"low",true))
          {
            if (lastClock != null)
              lastClock.low = ParseTime(val[1]);
          }
          else if(0 == string.Compare(val[0],"pwm",true))
          {
            if (lastClock != null)
              lastClock.pwm = ParseTime(val[1]);
          }
          else if(0 == string.Compare(val[0],"period",true))
          {
            if (lastClock != null)
              lastClock.period = ParseTime(val[1]);
          }
          else  // See if there's some pin jiggling going on
          {
            byte pin = Byte.Parse(val[0]);
            for(byte i=0; i &lt; val[1].Length; i++)
            {
              Clocks[pin+i].enabled = false; 
              DrivePin((byte)(pin+i),val[1][i]);
            }
          }
        }
        else if (val.Length == 1)
        {
          if (0 == string.Compare(val[0],"reset",true))
          {
            Chip.Reset();
          }
          else if (0 == string.Compare(val[0],"stop",true))
          {
            Chip.BreakPoint();
          }
        }
      }
      catch
      {
        // For now, unknown instructions get ignored.
      }
    }
  }

  private void ParseLine()
  {
    string str;

    while(true)
    {
      curLine = "";
      if(lineNo &gt;= this.textBox1.Lines.Length) // No more lines left to parse
        return; 
      str = this.textBox1.Lines[lineNo];
      lineNo++;
      if ((str.Length &gt; 1) &amp;&amp; (!str.StartsWith("!")))
      {  
        try  
        {
          string[] items = str.Split(new char[1]{' '});
          // Parse the time entry
          string ts = items[0];
          if(ts.StartsWith("+"))
            ts = ts.Remove(0,1);
          else
            nextTime = 0;
          nextTime += ParseTime(ts);
          // Add the first entry - with no leading space  
          if(items[1].Length &gt; 0)
            curLine = items[1];
          // Add the rest of the entires  
          for(int i=2;i&lt;items.Length;i++)
            curLine = curLine + " " + items[i];
          break;
        }
        catch
        {
          // Squash exceptions
        }
      }
    }
  }

  private double ParseTime(string timestr)
  {
    string str = timestr;
    double mult = 1;  
    if(str.EndsWith("n")) mult = 1e-9;
    if(str.EndsWith("u")) mult = 1e-6;
    if(str.EndsWith("m")) mult = 1e-3;
    if(str.EndsWith("K")) mult = 1e3;
    if(str.EndsWith("M")) mult = 1e6;
    if(mult != 1)
      str = str.Remove(str.Length-1);
    return Double.Parse(str, NumberStyles.AllowDecimalPoint) * mult;
  }
  
}</code>
</plugin>